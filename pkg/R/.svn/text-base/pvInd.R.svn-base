#' @encoding UTF-8
#' @title pvInd
#' @name pvInd
#' @param adr a data.frame with three columns:
# \itemize{
# \item spontaneous report identifier
# \item drug label
# \item adverse event label
# }
#' @param cov data.frame which contains individual covariates that can be used for stratified analysis. It is assumed that the first column of the data.frame corresponds to the spontaneous report identifier.
#' @param dMarginLim Minimum number of spontaneous reports for a drug to be included (default is 1)
#' @param aeMarginLim Minimum number of spontaneous reports for an adverse event to be included (default is 1) 
#' @description \code{pvInd} is used to convert raw data  (\code{adr} and ) \code{cov}) into an pvInd object that can be used in the signal detection method functions.
#' @author Isma√Øl Ahmed
#' @return a PvInd object
#' @keywords pvInd
#' @export
#' @docType methods
#' @aliases pvInd,data.frame,missing-method
#' @aliases pvInd,data.frame,data.frame-method
#' @rdname pvInd-methods

# pvInd method definition ---------------------------------------------------- 

setGeneric(
  name="pvInd",
  def=function(adr, cov, ...){standardGeneric("pvInd")}
)


setMethod(
  f="pvInd",
  signature = c(adr = "data.frame", cov="missing"),
  definition = function(adr, cov, dMarginLim=1, aeMarginLim=1){
    
    if(nrow(adr)==0) { stop("adr must contain at least one row")}
    if(ncol(adr)<3) { stop("adr must contain at least three columns")}
    
    adr[,1] <- factor(adr[,1])
    adr[,2] <- factor(adr[,2])
    adr[,3] <- factor(adr[,3])
    
    # drug Matrix
    colnD <- levels(adr[,2])
    rownD <- levels(adr[,1])
    idxR <- as.numeric(adr[,1])
    idxC <- as.numeric(adr[,2])
    sD <- sparseMatrix(idxR,idxC, x=1)
    sD[sD>1] <- 1
    rownames(sD) <- rownD
    colnames(sD) <- colnD
    
    # ae Mat
    colnD <- levels(adr[,3])
    idxC <- as.numeric(adr[,3])
    sAe <- sparseMatrix(idxR,idxC, x=1)
    sAe[sAe>1] <- 1
    rownames(sAe) <- rownD
    colnames(sAe) <- colnD
    
    nSp <- nrow(sD)
    dMargin <- drop(Matrix(1, nrow=1, ncol=nSp) %*% sD)
    aeMargin <- drop(Matrix(1, nrow=1, ncol=nSp) %*% sAe)
    
    if (ncol(adr)>3){
      #cov <- cov[,4:ncol(adr), drop=F]
      sel <- !duplicated(adr[,1])
      cov <- adr[sel, 4:ncol(adr), drop=F]
      rownames(cov) <- as.character(adr[sel,1])
    }
    if (missing(cov)) cov <-NULL
    PvInd<-new(Class="PvInd", drug=sD, ae=sAe, dMargin=dMargin, aeMargin=aeMargin, cov=cov)
    
    return(PvInd)
  }
)


setMethod(
  f="pvInd",
  signature = c(adr = "data.frame", cov="data.frame"),
  definition = function(adr, cov=NULL, dMarginLim=1, aeMarginLim=1){
    
    if(nrow(adr)==0) { stop("adr must contain at least one row")}
    if(ncol(adr)!=3) { stop("adr must contain three columns")}
    
    adr[,1] <- factor(adr[,1])
    adr[,2] <- factor(adr[,2])
    adr[,3] <- factor(adr[,3])
    
    # drug Matrix
    colnD <- levels(adr[,2])
    rownD <- levels(adr[,1])
    idxR <- as.numeric(adr[,1])
    idxC <- as.numeric(adr[,2])
    sD <- sparseMatrix(idxR,idxC, x=1)
    sD[sD>1] <- 1
    rownames(sD) <- rownD
    colnames(sD) <- colnD
    
    # ae Mat
    colnD <- levels(adr[,3])
    idxC <- as.numeric(adr[,3])
    sAe <- sparseMatrix(idxR,idxC, x=1)
    sAe[sAe>1] <- 1
    rownames(sAe) <- rownD
    colnames(sAe) <- colnD
    
    nSp <- nrow(sD)
    dMargin <- drop(Matrix(1, nrow=1, ncol=nSp) %*% sD)
    aeMargin <- drop(Matrix(1, nrow=1, ncol=nSp) %*% sAe)
    
    if (!is.null(cov)){
      idx <- match(row.names(sAe), cov[,1])
      if(sum(is.na(idx))) warning("Some labels are missing or mismatch between adr and covariates datasets")
      covSort <- cov[idx,]
      row.names(covSort) <- covSort[,1]
      covSort <- covSort[,-1]      
    }else{
      covSort <- NULL
    }
    PvInd<-new(Class="PvInd", drug=sD, ae=sAe, dMargin=dMargin, aeMargin=aeMargin, cov=covSort)
    return(PvInd)
  }
)

          
